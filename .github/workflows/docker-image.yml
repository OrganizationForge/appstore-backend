name: Docker Build and Deploy

on:
  push:
    branches: [ "develop" ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # Step 2: Definir el nombre dinámico de la imagen (timestamp)
    - name: Set Image Tag
      id: vars
      run: echo "IMAGE_TAG=storeapi:$(date +%s)" >> $GITHUB_ENV
    
    # Step 2: Construir la imagen Docker localmente
    - name: Build Docker image
      run: docker build . --file ./WebApi/Dockerfile --tag ${{ env.IMAGE_TAG }}

    # Step 3: Guardar la imagen Docker como un archivo tar
    - name: Save Docker image to file
      run: docker save -o storeapi.tar ${{ env.IMAGE_TAG }}

    # Step 4: Copiar la imagen tar al servidor Ubuntu
    - name: Copy image to server
      uses: appleboy/scp-action@v0.1.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        port: ${{ secrets.SERVER_PORT }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        source: ./storeapi.tar
        target: /home/mgiraudo/

    # Step 5: SSH al servidor para importar y desplegar la imagen
    - name: Deploy to Server
      uses: appleboy/ssh-action@v0.1.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        port: ${{ secrets.SERVER_PORT }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          sudo docker load -i /home/mgiraudo/storeapi.tar
          sudo docker stop append-api || true
          sudo docker rm append-api || true
          sudo docker run -d -p 8080:8080 -v /home/mgiraudo/apps/resources/images:/app/resources/images:rw --name append-api ${{ env.IMAGE_TAG }}

          # Ajuste para eliminar imágenes de 'storeapi' y 'store' creadas hace más de 2 días
          sudo docker images --format "{{.Repository}}:{{.Tag}} {{.ID}} {{.CreatedSince}}" | grep -E "^(storeapi):" | awk '$3 ~ /[2-9]+ days/ {print $2}' | xargs -r sudo docker rmi

